// GENERATED BY UNITY. REMOVE THIS COMMENT TO PREVENT OVERWRITING WHEN EXPORTING AGAIN

apply plugin: 'com.android.library'
apply from: '../base.gradle'

dependencies {
    api fileTree(dir: 'libs', include: ['*.jar'])
}

android {
    compileSdkVersion 32
    buildToolsVersion '30.0.3'

    compileOptions {
        sourceCompatibility JavaVersion.VERSION_1_8
        targetCompatibility JavaVersion.VERSION_1_8
    }

    defaultConfig {
        ndk {
            abiFilters 'armeabi-v7a', 'arm64-v8a'
        }
        versionCode 1
        versionName '0.0.1'
        consumerProguardFiles 'proguard-unity.txt'
    }

    lintOptions {
        abortOnError false
    }

    aaptOptions {
        noCompress = ['.ress', '.resource', '.obb'] + unityStreamingAssets.tokenize(', ')
        ignoreAssetsPattern = "!.svn:!.git:!.ds_store:!*.scc:.*:!CVS:!thumbs.db:!picasa.ini:!*~"
    }

    packagingOptions {
        doNotStrip '*/armeabi-v7a/*.so'
        doNotStrip '*/arm64-v8a/*.so'
    }
}

def getSdkDir() {
    File localPropertiesFile = new File(rootDir, "local.properties")
    if (localPropertiesFile.exists()) {
        Properties properties = new Properties()
        properties.load(new FileInputStream(localPropertiesFile))
        return properties.getProperty('sdk.dir')
    } else {
        return System.getenv()["ANDROID_HOME"]
    }
}

def getNdkDir() {
    File localPropertiesFile = new File(rootDir, "local.properties")
    if (localPropertiesFile.exists()) {
        Properties properties = new Properties()
        properties.load(new FileInputStream(localPropertiesFile))
        String ndkDir = properties.getProperty('ndk.dir')
        if (ndkDir != null) {
            return ndkDir
        }
    }

    return System.getenv()["ANDROID_NDK_R21D_HOME"]
}

def BuildIl2Cpp(String workingDir, String targetDirectory, String architecture, String abi, String configuration) {
    exec {
        commandLine(workingDir + "/src/main/Il2CppOutputProject/IL2CPP/build/deploy/netcoreapp3.1/il2cpp.exe",
            "--compile-cpp",
            "--incremental-g-c-time-slice=3",
            "--avoid-dynamic-library-copy",
            "--profiler-report",
            "--libil2cpp-static",
            "--platform=Android",
            "--architecture=" + architecture,
            "--configuration=" + configuration,
            "--outputpath=" + workingDir + targetDirectory + abi + "/libil2cpp.so",
            "--cachedirectory=" + workingDir + "/build/il2cpp_"+ abi + "_" + configuration + "/il2cpp_cache",
            "--additional-include-directories=" + workingDir + "/src/main/Il2CppOutputProject/IL2CPP/external/bdwgc/include",
            "--additional-include-directories=" + workingDir + "/src/main/Il2CppOutputProject/IL2CPP/libil2cpp/include",
            "--tool-chain-path=" + getNdkDir(),
            "--map-file-parser=" + workingDir + "/src/main/Il2CppOutputProject/IL2CPP/MapFileParser/MapFileParser.exe",
            "--generatedcppdir=" + workingDir + "/src/main/Il2CppOutputProject/Source/il2cppOutput",
            "--baselib-directory=" + workingDir + "/src/main/jniStaticLibs/" + abi,
            "--dotnetprofile=unityaot")
        environment "ANDROID_SDK_ROOT", getSdkDir()
    }
    ext.onIlCppBuilt(workingDir, abi)


    delete workingDir + targetDirectory + abi + "/libil2cpp.sym.so"
    ant.move(file: workingDir + targetDirectory + abi + "/libil2cpp.dbg.so", tofile: workingDir + "/symbols/" + abi + "/libil2cpp.so")
}

android {
    task BuildIl2CppTask {
        doLast {
            File Il2CppOutputProjectFile = new File(projectDir, "\\src\\main\\Il2CppOutputProject")
            println "Il2CppOutputProjectFile-->:" + Il2CppOutputProjectFile;
            if (Il2CppOutputProjectFile.exists()) {
                println "Il2CppOutputProjectFile-->:是il2cpp打包"
                File v8Dir = new File(projectDir, "\\src\\main\\jniLibs\\arm64-v8a")
                println "v8Dir-->:" + v8Dir;
                if (v8Dir.exists()) {
                    println "BuildIl2CppTask 支持64位";
                    File il2cppSo = new File(projectDir, "\\src\\main\\jniLibs\\arm64-v8a\\libil2cpp.so")
                    if (!il2cppSo.exists()) {
                        println "BuildIl2CppTask 64位 so文件不存在 编译";
                        BuildIl2Cpp(projectDir.toString().replaceAll('\\\\', '/'), '/src/main/jniLibs/', 'ARM64', 'arm64-v8a', 'Release');
                    }
                }
                File v7Dir = new File(projectDir, "\\src\\main\\jniLibs\\armeabi-v7a")
                println "v7Dir-->:" + v7Dir;
                if (v7Dir.exists()) {
                    println "BuildIl2CppTask 支持32位";
                    File il2cppSo = new File(projectDir, "\\src\\main\\jniLibs\\armeabi-v7a\\libil2cpp.so")
                    if (!il2cppSo.exists()) {
                        println "BuildIl2CppTask 32位 so文件不存在 编译";
                        BuildIl2Cpp(projectDir.toString().replaceAll('\\\\', '/'), '/src/main/jniLibs/', 'ARMv7', 'armeabi-v7a', 'Release');
                    }
                }
            }
        }
    }
    afterEvaluate {
        buildTypes.all { buildType ->
            def buildTypeName = buildType.name.capitalize()
            def taskName = "merge${buildTypeName}JniLibFolders"
            if (project.tasks.findByName(taskName)) {
                project."$taskName".dependsOn BuildIl2CppTask
            }
        }
    }
    sourceSets {
        main {
            jni.srcDirs = ["src/main/Il2CppOutputProject"]
        }
    }
}



